import os
from sqlite3 import IntegrityError

import aiogram
from aiogram import Bot
from aiogram import types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import Dispatcher, FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import ReplyKeyboardRemove
from aiogram.utils import executor

import button
import config
import db

storage = MemoryStorage()
bot = Bot(token=config.TOKEN)
dp = Dispatcher(bot, storage=storage)


async def on_startup(_):
    print('Bot activated')
    db.start_db()


class quest(StatesGroup):
    q1 = State()
    q2 = State()
    q3 = State()
    q4 = State()
    q5 = State()
    q6 = State()
    q7 = State()
    q8 = State()
    q9 = State()
    q10 = State()
    q11 = State()
    q12 = State()
    q13 = State()


class MassSend(StatesGroup):
    sendd = State()


@dp.message_handler(commands='start')
async def strt(message: types.Message):
    try:
        db.db_add(message.from_user.id, message.from_user.first_name, message.from_user.username)
    except IntegrityError:
        pass
    await bot.send_message(message.from_user.id, text="–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ!\n"
                                                      "–¶–µ–π –±–æ—Ç –¥–æ–ø–æ–º–æ–∂–µ –≤–∞–º –∑—Ä–æ–∑—É–º—ñ—Ç–∏ –Ω–∞—Å–∫—ñ–ª—å–∫–∏ –≤–∏ –æ–±—ñ–∑–Ω–∞–Ω—ñ "
                                                      "—É —Ç–µ–º—ñ –≥–æ–¥—É–≤–∞–Ω–Ω—è –≥—Ä—É–¥–¥—é, –ø—Ä–æ–π–¥—ñ—Ç—å –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è —Ç–∞ –¥—ñ–∑–Ω–∞—î—Ç–µ—Å—è "
                                                      "—Å–≤—ñ–π —Ä—ñ–≤–µ–Ω—å –∑–Ω–∞–Ω—å —É —Ü—ñ–π —Ç–µ–º—ñ\n", reply_markup=button.interview())


@dp.message_handler(commands='send', state=None)
async def snd(message: types.Message):


    if message.from_user.id not in config.ADMIN_ID:
        await bot.send_message(message.from_user.id, text="–í –î–û–°–¢–£–ü–Ü –í–Ü–î–ú–û–í–õ–ï–ù–û!")
    else:
        await bot.send_message(message.from_user.id, text=f"–ù–∞–ø–∏—à–∏—Ç–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è "
                                                          f"—Ä–∞—Å—Å—ã–ª–∫–∏ –æ–Ω–æ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {len(db.all_user())} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")
        await MassSend.sendd.set()



@dp.message_handler(content_types=aiogram.types.ContentType.ANY,
                    state=MassSend.sendd)
async def send(message: types.Message, state: FSMContext):
    good, bad = 0, 0
    await state.finish()
    errors_list = []
    for i in db.all_user():
        try:
            await bot.send_message(i[0], message.text)
            good += 1
        except Exception as e:
            bad += 1
            errors_list.append(e)
    await bot.send_message(message.from_user.id, '–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ\n'
                                                 f'–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {good}\n'
                                                 f'–ù–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {bad}\n'
                                                 f'–û—à–∏–±–∫–∏ {set(errors_list)}')


# ******************************************************************************************************************
# 1 –í–û–ü–†–û–°

@dp.callback_query_handler(text='start_again', state=None)
@dp.message_handler(text_startswith='–ü–æ—á–∞—Ç–∏ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è', state=None)
async def question_1(message: types.Message):
    #    await db.start_num_db()
    #    await db.add_pnt(message.from_user.id)
    await quest.q1.set()
    await bot.send_message(message.from_user.id, '–î–∞–π—Ç–µ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ 13 –ø–∏—Ç–∞–Ω—å —Ç–∞ –¥—ñ–∑–Ω–∞–π—Ç–µ—Å—è –Ω–∞—Å–∫—ñ–ª—å–∫–∏ –≤–∏ '
                                                 '–æ–±—ñ–∑–Ω–∞–Ω—ñ —É –≥—Ä—É–¥–Ω–æ–º—É –≤–∏–≥–æ–¥–æ–≤—É–≤–∞–Ω–Ω—ñ ü§î',
                           reply_markup=ReplyKeyboardRemove())
    await bot.send_message(message.from_user.id, text="1 –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –∑ 13\n\n"
                                                      "–ì—Ä—É–¥–Ω–µ –≤–∏–≥–æ–¥–æ–≤—É–≤–∞–Ω–Ω—è –º–æ–∂–ª–∏–≤–µ –ª–∏—à–µ –≤ —Ç–æ–º—É –≤–∏–ø–∞–¥–∫—É, "
                                                      "—è–∫—â–æ –∂—ñ–Ω–∫–∞ –Ω–∞—Ä–æ–¥–∏–ª–∞ –ø—Ä–∏—Ä–æ–¥–Ω—ñ–º —à–ª—è—Ö–æ–º?",
                           reply_markup=button.yes_no())


@dp.callback_query_handler(text='yes_yes', state=quest.q1)
async def question_1(call: types.CallbackQuery):
    await call.answer()
    await bot.send_message(call.from_user.id, text=f'–¶–µ –Ω–µ–ø—Ä–∞–≤–¥–∞!\n'
                                                   f'–ì–í –º–æ–∂–Ω–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ –Ω–µ –ª–∏—à–µ –ø—ñ—Å–ª—è –∫–µ—Å–∞—Ä–µ–≤–æ–≥–æ —Ä–æ–∑—Ç–∏–Ω—É, '
                                                   f'–∞–ª–µ –π —É —Ç–æ–º—É –≤–∏–ø–∞–¥–∫—É, –∫–æ–ª–∏ –∂—ñ–Ω–∫–∞ –Ω–µ –Ω–∞—Ä–æ–¥–∂—É–≤–∞–ª–∞ –¥–∏—Ç–∏–Ω—É, –∞, '
                                                   f'–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, —Å—Ç–∞–ª–∞ –π–æ–≥–æ –ø—Ä–∏–π–æ–º–Ω–æ—é —á–∏ –≤—Ç–æ—Ä–æ—é –º–∞–º–æ—é. '
                                                   f'–Ø–≤–∏—â–µ –º–∞—î –Ω–∞–∑–≤—É —ñ–Ω–¥—É–∫–æ–≤–∞–Ω–∞ –ª–∞–∫—Ç–∞—Ü—ñ—è.\n'
                                                   f'–á–á –º–æ–∂–Ω–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏, —è–∫—â–æ –¥–æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏—Å—å –ø–µ–≤–Ω–æ—ó —Å—Ö–µ–º–∏ –¥—ñ–π.',
                           reply_markup=button.next())


@dp.callback_query_handler(text='nope', state=quest.q1)
async def question_1(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        data['points'] = data.get('points', 0) + 1
    await call.answer()
    await bot.send_message(call.from_user.id, text=f'–ê–±—Å–æ–ª—é—Ç–Ω–æ –≤—ñ—Ä–Ω–æ!\n'
                                                   f'–Ü–Ω–¥—É–∫–æ–≤–∞–Ω–∞ –ª–∞–∫—Ç–∞—Ü—ñ—è –º–æ–∂–ª–∏–≤–∞ —É —Å–∞–º–∏—Ö —Ä—ñ–∑–Ω–∏—Ö –≤–∏–ø–∞–¥–∫–∞—Ö —Ç–∞ '
                                                   f'–¥–æ–∑–≤–æ–ª—è—î –∂—ñ–Ω—Ü—ñ –≤–∏–≥–æ–¥—É–≤–∞—Ç–∏ —Å–≤–æ—é –¥–∏—Ç–∏–Ω—É, –Ω–∞–≤—ñ—Ç—å –Ω–µ –Ω–∞—Ä–æ–¥–∂—É—é—á–∏ –π–æ–≥–æ.\n'
                                                   f'–ö–∞–∂—É—Ç—å, –ö—ñ–º –ö–∞—Ä–¥–∞—à—å—è–Ω –≥–æ–¥—É–≤–∞–ª–∞ –≥—Ä—É–¥–¥—é —Å–≤–æ—é —Ç—Ä–µ—Ç—é –¥–∏—Ç–∏–Ω—É, '
                                                   f'—è–∫–æ–≥–æ —ó–π –Ω–∞—Ä–æ–¥–∏–ª–∞ —Å—É—Ä–æ–≥–∞—Ç–Ω–∞ –º–∞—Ç–∏.',
                           reply_markup=button.next())
    await call.answer()


# 1 –í–û–ü–†–û–°
# ******************************************************************************************************************
# 2 –í–û–ü–†–û–°


@dp.callback_query_handler(text='nxt', state=quest.q1)
async def question_2(call: types.CallbackQuery):
    await call.answer()
    await bot.send_message(call.from_user.id, text=f"2 –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –∑ 13\n\n"
                                                   f"–ì—Ä—É–¥–Ω–µ –º–æ–ª–æ–∫–æ –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –æ–±—Å—Ç–∞–≤–∏–Ω –º–æ–∂–µ –∑–º—ñ–Ω—é–≤–∞—Ç–∏ –∫–æ–ª—ñ—Ä?",
                           reply_markup=button.yes_no())
    await quest.next()


@dp.callback_query_handler(text='yes_yes', state=quest.q2)
async def question_2(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        data['points'] = data.get('points', 0) + 1
    await call.answer()
    await bot.send_message(call.from_user.id, text=f'–¶–µ –ø—Ä–∞–≤–¥–∞!\n'
                                                   f'–ú–æ–ª–æ–∫–æ –º–æ–∂–µ –±—É—Ç–∏ –Ω–µ –ª–∏—à–µ –±—ñ–ª–∏–º, '
                                                   f'–∞–ª–µ –π –º–∞—Ç–∏ –±–ª–∞–∫–∏—Ç–Ω–∏–π, –∑–µ–ª–µ–Ω–∏–π, —Ä–æ–∂–µ–≤–∏–π, –ø–æ–º–∞—Ä–∞–Ω—á–µ–≤–∏–π, '
                                                   f'–∂–æ–≤—Ç–∏–π (–≤–≤–∞–∂–∞–π—Ç–µ: –∑–æ–ª–æ—Ç–∏–π!) –≤—ñ–¥—Ç—ñ–Ω–æ–∫.\n'
                                                   f'–¶–µ –∑–∞–ª–µ–∂–∏—Ç—å –≤—ñ–¥ –±–µ–∑–ª—ñ—á—ñ —Ñ–∞–∫—Ç–æ—Ä—ñ–≤: –Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –≤—ñ–¥ —Ç–æ–≥–æ, '
                                                   f'—è–∫–∞ —Å—å–æ–≥–æ–¥–Ω—ñ –ø–æ–≥–æ–¥–∞, —è–∫ –≤—ñ–¥—á—É–≤–∞—î —Å–µ–±–µ –¥–∏—Ç–∏–Ω–∞, —â–æ –∑‚Äô—ó–ª–∞ —ó—ó –º–∞–º–∞.',
                           reply_markup=button.next())


@dp.callback_query_handler(text='nope', state=quest.q2)
async def question_2(call: types.CallbackQuery):
    await call.answer()
    await bot.send_message(call.from_user.id, text=f'–î—É–∂–µ –Ω–∞–≤—ñ—Ç—å –º–æ–∂–µ!\n'
                                                   f'–í–æ–Ω–æ –±—É–≤–∞—î –Ω–∞–π—Ä—ñ–∑–Ω–æ–º–∞–Ω—ñ—Ç–Ω—ñ—à–∏—Ö –≤—ñ–¥—Ç—ñ–Ω–∫—ñ–≤, '
                                                   f'—è–∫—ñ –æ–±—É–º–æ–≤–ª—é—é—Ç—å—Å—è —Ä—ñ–∑–Ω–∏–º–∏ –æ–±—Å—Ç–∞–≤–∏–Ω–∞–º–∏ —É –∂–∏—Ç—Ç—ñ –º–∞—Ç–µ—Ä—ñ '
                                                   f'—Ç–∞ –¥–∏—Ç–∏–Ω–∏: –≤—ñ–¥ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∏ –ø–æ–≤—ñ—Ç—Ä—è –¥–æ —Ä–∞—Ü—ñ–æ–Ω—É –∂—ñ–Ω–∫–∏.',
                           reply_markup=button.next())


# 2 –í–û–ü–†–û–°
# ******************************************************************************************************************
# 3 –í–û–ü–†–û–°


@dp.callback_query_handler(text='nxt', state=quest.q2)
async def question_3(call: types.CallbackQuery):
    await call.answer()
    await bot.send_message(call.from_user.id, text="3 –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –∑ 13\n\n"
                                                   "–ì—Ä—É–¥–Ω–µ –º–æ–ª–æ–∫–æ –∑–∞—Ö–∏—â–∞—î –º–∞–ª—é–∫—ñ–≤ –≤—ñ–¥ —ñ–Ω—Ñ–µ–∫—Ü—ñ–π?",
                           reply_markup=button.yes_no())
    await quest.next()


@dp.callback_query_handler(text='yes_yes', state=quest.q3)
async def question_3(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        data['points'] = data.get('points', 0) + 1
    await call.answer()
    await bot.send_message(call.from_user.id, text=f'–ó–∞—Ö–∏—â–∞—î!\n–Ü –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –∞–Ω—Ç–∏—Ç—ñ–ª, '
                                                   f'—ñ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –ª–µ–π–∫–æ—Ü–∏—Ç—ñ–≤, —ñ –Ω–∞–≤—ñ—Ç—å –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é —Ü—É–∫—Ä—ñ–≤, '
                                                   f'—è–∫—ñ –¥–æ–ø–æ–º–∞–≥–∞—é—Ç—å —Ä–æ—Å—Ç—É –∫–æ—Ä–∏—Å–Ω–∏—Ö –±–∞–∫—Ç–µ—Ä—ñ–π —É –∫–∏—à–∫—ñ–≤–Ω–∏–∫—É –º–∞–ª—é–∫–∞, '
                                                   f'–∞ —Ç–∞–∫–æ–∂ –ø–µ—Ä–µ—à–∫–æ–¥–∂–∞—é—Ç—å –∑–∞—Å–µ–ª–µ–Ω–Ω—é —Å–ª–∏–∑–æ–≤–∏—Ö –ø–∞—Ç–æ–≥–µ–Ω–Ω–∏–º–∏ –º—ñ–∫—Ä–æ–±–∞–º–∏. '
                                                   f'–î–∏–≤–∞ —Ç–∞ –π –≥–æ–¥—ñ! '
                                                   f'–¢–∞–∫, –≥–æ–¥—É–≤–∞—Ç–∏ –ø—ñ–¥ —á–∞—Å —Ö–≤–æ—Ä–æ–±–∏ (—ñ –¥–∏—Ç–∏–Ω–∏, —ñ –º–∞–º–∏) –º–æ–∂–Ω–∞!',
                           reply_markup=button.next())


@dp.callback_query_handler(text='nope', state=quest.q3)
async def question_3(call: types.CallbackQuery):
    await call.answer()
    await bot.send_message(call.from_user.id, text=f'–©–µ –π —è–∫ –∑–∞—Ö–∏—â–∞—î!\n'
                                                   f'–£ –º–æ–ª–æ—Ü—ñ –º—ñ—Å—Ç—è—Ç—å—Å—è –∫–ª—ñ—Ç–∏–Ω–∏, '
                                                   f'—è–∫—ñ –¥–æ–ø–æ–º–∞–≥–∞—é—Ç—å –≤–µ—Å—Ç–∏ –±–æ—Ä–æ—Ç—å–±—É –∑ —É—Å—ñ–ª—è–∫–∏–º–∏ –Ω–µ–ø—Ä–∏—î–º–Ω–∏–º–∏ –º—ñ–∫—Ä–æ–±–∞–º–∏, '
                                                   f'—â–æ –∞—Ç–∞–∫—É—é—Ç—å –º–∞–ª—é–∫–∞ –∑ –ø–µ—Ä—à–∏—Ö —Ö–≤–∏–ª–∏–Ω –π–æ–≥–æ –∂–∏—Ç—Ç—è.',
                           reply_markup=button.next())


# 3 –í–û–ü–†–û–°
# ******************************************************************************************************************
# 4 –í–û–ü–†–û–°


@dp.callback_query_handler(text='nxt', state=quest.q3)
async def question_4(call: types.CallbackQuery):
    await call.answer()
    await bot.send_message(call.from_user.id, text="4 –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –∑ 13\n\n"
                                                   "–ú–æ–ª–æ–∫–æ –Ω–µ –∑–º—ñ–Ω—é—î —Å–≤–æ–≥–æ —Å–º–∞–∫—É —Ç–∞ —Å–∫–ª–∞–¥—É –ø—Ä–æ—Ç—è–≥–æ–º —É—Å—å–æ–≥–æ "
                                                   "–ø–µ—Ä—ñ–æ–¥—É –≥–æ–¥—É–≤–∞–Ω–Ω—è, —Å–∞–º–µ —Ç–æ–º—É –ø—ñ—Å–ª—è —à–µ—Å—Ç–∏ –º—ñ—Å—è—Ü—ñ–≤ –ª–∞–∫—Ç–∞—Ü—ñ—ó "
                                                   "–≤–æ–Ω–æ —Å—Ç–∞—î –ø–æ—Ä–æ–∂–Ω—ñ–º",
                           reply_markup=button.yes_no())
    await quest.next()


@dp.callback_query_handler(text='yes_yes', state=quest.q4)
async def question_4(call: types.CallbackQuery):
    await call.answer()
    await bot.send_message(call.from_user.id, text=f'–¶–µ —Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –Ω–µ–≤—ñ—Ä–Ω–µ.\n–ú–æ–ª–æ–∫–æ ‚Äì –¥–∏–∑–∞–π–Ω–µ—Ä—Å—å–∫–∏–π –ø—Ä–æ–¥—É–∫—Ç, '
                                                   f'—Å–∫–ª–∞–¥ —è–∫–æ–≥–æ –∑–∞–ª–µ–∂–∏—Ç—å –≤—ñ–¥ –ø–æ—Ç—Ä–µ–± —Ç–∞ –≤—ñ–∫—É –º–∞–ª—é–∫–∞.\n–ù–∞–ø—Ä–∏–∫–ª–∞–¥, '
                                                   f'–º–æ–ª–æ–∫–æ, —è–∫–µ –∂—ñ–Ω–æ—á—ñ–π –æ—Ä–≥–∞–Ω—ñ–∑–º –ø—Ä–æ–¥—É–∫—É—î –¥–ª—è –Ω–µ–¥–æ–Ω–æ—à–µ–Ω–æ—ó –¥–∏—Ç–∏–Ω–∏, '
                                                   f'—î –±—ñ–ª—å—à –Ω–∞—Å–∏—á–µ–Ω–∏–º —Ç–∞ –ø–æ–∂–∏–≤–Ω–∏–º, '
                                                   f'–æ—Å–∫—ñ–ª—å–∫–∏ –¥–∏—Ç–∏–Ω—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω–∞ –æ—Å–æ–±–ª–∏–≤–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∞.\n'
                                                   f'–ö—Ä—ñ–º —Ç–æ–≥–æ, —É –∫–æ–∂–Ω–æ—ó –∂—ñ–Ω–∫–∏ –º–æ–ª–æ–∫–æ —ñ–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω–µ –∑–∞ —Å–≤–æ—ó–º —Å–∫–ª–∞–¥–æ–º.',
                           reply_markup=button.next())


@dp.callback_query_handler(text='nope', state=quest.q4)
async def question_4(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        data['points'] = data.get('points', 0) + 1
    await call.answer()
    await bot.send_message(call.from_user.id, text=f'–í–∏ –ø—Ä–∞–≤—ñ, –º–æ–ª–æ–∫–æ –∑–º—ñ–Ω—é—î—Ç—å—Å—è –ø—Ä–æ—Ç—è–≥–æ–º —É—Å—å–æ–≥–æ —á–∞—Å—É –ª–∞–∫—Ç–∞—Ü—ñ—ó.\n'
                                                   f'–ù–∞ –π–æ–≥–æ —Å–º–∞–∫ –≤–ø–ª–∏–≤–∞—é—Ç—å –ø—Ä–æ–¥—É–∫—Ç–∏, —è–∫—ñ —Å–ø–æ–∂–∏–≤–∞—î –ª–∞–∫—Ç—É—é—á–∞ –∂—ñ–Ω–∫–∞ '
                                                   f'(—î –≤–µ—Ä—Å—ñ—è, —â–æ —á–∏–º —Ä—ñ–∑–Ω–æ–º–∞–Ω—ñ—Ç–Ω—ñ—à–µ –≤–æ–Ω–∞ —Ö–∞—Ä—á—É—î—Ç—å—Å—è, '
                                                   f'—Ç–∏–º –º–µ–Ω—à–æ—é —î –≤—ñ—Ä–æ–≥—ñ–¥–Ω—ñ—Å—Ç—å —Ç–æ–≥–æ, '
                                                   f'—â–æ –≤ –Ω–µ—ó –≤–∏—Ä–æ—Å—Ç–µ –º–∞–ª–µ–Ω—å–∫–∏–π –ø—Ä–∏–≤–µ—Ä–µ–¥–∞).\n'
                                                   f'–ê –Ω–∞ —Å–∫–ª–∞–¥ ‚Äì —ñ –≤—ñ–∫ –¥–∏—Ç–∏–Ω–∏, —ñ –æ—Å–æ–±–ª–∏–≤–æ—Å—Ç—ñ —ó—ó —Ñ—ñ–∑–∏—á–Ω–æ–≥–æ —Å—Ç–∞–Ω—É, '
                                                   f'—ñ –ø–æ—Ç—Ä–µ–±–∞ –≤ –ø–µ–≤–Ω–∏—Ö —Ä–µ—á–æ–≤–∏–Ω–∞—Ö.',
                           reply_markup=button.next())


# 4 –í–û–ü–†–û–°
# ******************************************************************************************************************
# 5 –í–û–ü–†–û–°


@dp.callback_query_handler(text='nxt', state=quest.q4)
async def question_5(call: types.CallbackQuery):
    await call.answer()
    await bot.send_message(call.from_user.id, text="5 –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –∑ 13\n\n"
                                                   "–ú–∞–º–∞, —â–æ –≥–æ–¥—É—î, –º–∞—î —Ñ—ñ–∑–∏—á–Ω—ñ —Å—É–ø–µ—Ä-—Å–∏–ª–∏ —á–µ—Ä–µ–∑ –≥–æ—Ä–º–æ–Ω–∏, "
                                                   "—Ç–æ–º—É –º–æ–∂–µ –≤—Å—Ç–∏–≥–Ω—É—Ç–∏ –∞–±—Å–æ–ª—é—Ç–Ω–æ –≤—Å–µ: –º–∞–ª—é–∫, –ø–∏—Ä—ñ–≥, —Å–µ–∫—Å, –∫–∞—Ä‚Äô—î—Ä–∞.",
                           reply_markup=button.yes_no())
    await quest.next()


@dp.callback_query_handler(text='yes_yes', state=quest.q5)
async def question_5(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        data['points'] = data.get('points', 0) + 1
    await call.answer()
    await bot.send_message(call.from_user.id, text=f'–¶–µ –Ω–µ —Ç–∞–∫.\n–ù–∞ —â–∞—Å—Ç—è, —î —Å—É—á–∞—Å–Ω—ñ –Ω—É—Ç—Ä–∏—Ü—ñ–æ–ª–æ–≥—ñ—á–Ω—ñ –ø—Ä–æ–¥—É–∫—Ç–∏, '
                                                   f'—è–∫—ñ –Ω–µ —Ç—ñ–ª—å–∫–∏ –ø—ñ–¥—Ç—Ä–∏–º—É—é—Ç—å –ª–∞–∫—Ç–∞—Ü—ñ—é, –∞ –π –º–∞—é—Ç—å —â–µ –±–∞–≥–∞—Ç–æ –µ—Ñ–µ–∫—Ç—ñ–≤, '
                                                   f'—è–∫—ñ –¥–æ–ø–æ–º–∞–≥–∞—é—Ç—å —Å–∞–º–µ –º–∞–º—ñ:\n'
                                                   f'- –¥–æ–¥–∞—é—Ç—å —Å–∏–ª–∏ —Ç–∞ –≤–∏—Ç—Ä–∏–≤–∞–ª–æ—Å—Ç—ñ\n'
                                                   f'- –∑–∞—Å–ø–æ–∫–æ—é—é—Ç—å,–ø–æ–∫—Ä–∞—â—É—é—Ç—å —Å–æ–Ω\n'
                                                   f'- —â–æ–± –º–æ–∂–Ω–∞ –±—É–ª–æ –≤–∏—Å–ø–∞—Ç–∏—Å—è –Ω–∞–≤—ñ—Ç—å –∑ '
                                                   f'—á–∞—Å—Ç–∏–º–∏ –ø–µ—Ä–µ—Ä–≤–∞–º–∏ –Ω–∞ –≥–æ–¥—É–≤–∞–Ω–Ω—è\n'
                                                   f'- –ø—Ä–∏—à–≤–∏–¥—à—É—é—Ç—å —Å—Ö—É–¥–Ω–µ–Ω–Ω—è –ø—ñ—Å–ª—è –ø–æ–ª–æ–≥—ñ–≤\n'
                                                   f'- –∑–º—ñ—Ü–Ω—é—é—Ç—å —ñ–º—É–Ω—ñ—Ç–µ—Ç\n'
                                                   f'- —Å–ø—Ä–∏—è—é—Ç—å –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—é —à–∫—ñ—Ä–∏ —Ç–∞ –≤–æ–ª–æ—Å—Å—è\n',
                           reply_markup=button.next())


@dp.callback_query_handler(text='nope', state=quest.q5)
async def question_5(call: types.CallbackQuery):
    await call.answer()
    await bot.send_message(call.from_user.id, text=f'–ü—Ä–∞–≤–∏–ª—å–Ω–æ!\n–ú–∞–º–∞ ‚Äì —Ü–µ –∂–∏–≤–∞ –ª—é–¥–∏–Ω–∞, –∞ –Ω–µ —Ä–µ–∞–∫—Ç–æ—Ä.\n'
                                                   f'–ù–∞ —â–∞—Å—Ç—è, —î —Å—É—á–∞—Å–Ω—ñ –Ω—É—Ç—Ä–∏—Ü—ñ–æ–ª–æ–≥—ñ—á–Ω—ñ –ø—Ä–æ–¥—É–∫—Ç–∏, —è–∫—ñ –Ω–µ —Ç—ñ–ª—å–∫–∏ '
                                                   f'–ø—ñ–¥—Ç—Ä–∏–º—É—é—Ç—å –ª–∞–∫—Ç–∞—Ü—ñ—é, –∞ –π –º–∞—é—Ç—å —â–µ –±–∞–≥–∞—Ç–æ –µ—Ñ–µ–∫—Ç—ñ–≤, '
                                                   f'—è–∫—ñ –¥–æ–ø–æ–º–∞–≥–∞—é—Ç—å —Å–∞–º–µ –º–∞–º—ñ:\n'
                                                   f'- –¥–æ–¥–∞—é—Ç—å —Å–∏–ª–∏ —Ç–∞ –≤–∏—Ç—Ä–∏–≤–∞–ª–æ—Å—Ç—ñ\n'
                                                   f'- –∑–∞—Å–ø–æ–∫–æ—é—é—Ç—å\n'
                                                   f'- –ø–æ–∫—Ä–∞—â—É—é—Ç—å —Å–æ–Ω, —â–æ–± –º–æ–∂–Ω–∞ –±—É–ª–æ –≤–∏—Å–ø–∞—Ç–∏—Å—è –Ω–∞–≤—ñ—Ç—å –∑ '
                                                   f'—á–∞—Å—Ç–∏–º–∏ –ø–µ—Ä–µ—Ä–≤–∞–º–∏ –Ω–∞ –≥–æ–¥—É–≤–∞–Ω–Ω—è\n'
                                                   f'- –ø—Ä–∏—à–≤–∏–¥—à—É—é—Ç—å —Å—Ö—É–¥–Ω–µ–Ω–Ω—è –ø—ñ—Å–ª—è –ø–æ–ª–æ–≥—ñ–≤\n'
                                                   f'- –∑–º—ñ—Ü–Ω—é—é—Ç—å —ñ–º—É–Ω—ñ—Ç–µ—Ç\n'
                                                   f'- —Å–ø—Ä–∏—è—é—Ç—å –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—é —à–∫—ñ—Ä–∏ —Ç–∞ –≤–æ–ª–æ—Å—Å—è\n',
                           reply_markup=button.next())


# 5 –í–û–ü–†–û–°
# ******************************************************************************************************************
# 6 –í–û–ü–†–û–°


@dp.callback_query_handler(text='nxt', state=quest.q5)
async def question_6(call: types.CallbackQuery):
    await call.answer()
    await bot.send_message(call.from_user.id, text="6 –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –∑ 13\n\n"
                                                   "–ì—Ä—É–¥–Ω–∏—á–∫—ñ–≤ —Ç—Ä–µ–±–∞ –¥–æ–ø–æ—é–≤–∞—Ç–∏ –≤–æ–¥–æ—é?",
                           reply_markup=button.yes_no())
    await quest.next()


@dp.callback_query_handler(text='yes_yes', state=quest.q6)
async def question_6(call: types.CallbackQuery):
    await call.answer()
    await bot.send_message(call.from_user.id, text=f'–ù–µ –≤–∞—Ä—Ç–æ!\n–ú–æ–ª–æ–∫–æ –º–∞–π–∂–µ –ø–æ–≤–Ω—ñ—Å—Ç—é —Å–∫–ª–∞–¥–∞—î—Ç—å—Å—è –∑ –≤–æ–¥–∏, '
                                                   f'—è–∫–∞ –Ω–∞ —É—Å—ñ —Å—Ç–æ –∑–∞–¥–æ–≤–æ–ª—å–Ω—è—î –ø–æ—Ç—Ä–µ–±–∏ –º–∞–ª—é–∫–∞ –≤ —Ä—ñ–¥–∏–Ω—ñ.\n'
                                                   f'–ù–∞–≤—ñ—Ç—å —É —Å–ø–µ–∫–æ—Ç–Ω–∏–π –¥–µ–Ω—å, –æ—Å–∫—ñ–ª—å–∫–∏, —è–∫ –º–∏ –≤—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ —Ä–∞–Ω—ñ—à–µ, '
                                                   f'–º–æ–ª–æ–∫–æ –ø—ñ–¥–ª–∞—à—Ç–æ–≤—É—î—Ç—å—Å—è –ø—ñ–¥ –∑–æ–≤–Ω—ñ—à–Ω—ñ –æ–±—Å—Ç–∞–≤–∏–Ω–∏: '
                                                   f'–≤ –æ—Å–æ–±–ª–∏–≤–æ —Å–ø–µ–∫–æ—Ç–Ω—ñ –¥–Ω—ñ –≤–æ–Ω–æ —Å—Ç–∞—î –±—ñ–ª—å—à –≤–æ–¥—è–Ω–∏—Å—Ç–∏–º.',
                           reply_markup=button.next())


@dp.callback_query_handler(text='nope', state=quest.q6)
async def question_6(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        data['points'] = data.get('points', 0) + 1
    await call.answer()
    await bot.send_message(call.from_user.id, text=f'–ü—Ä–∞–≤–∏–ª—å–Ω–æ, —Ä–æ–±–∏—Ç–∏ —Ü—å–æ–≥–æ –Ω–µ –≤–∞—Ä—Ç–æ.\n'
                                                   f'–¶–µ –Ω–µ –ª–∏—à–µ –º–∞—Ä–Ω–æ, –∞–ª–µ –π –Ω–∞–≤—ñ—Ç—å –º–æ–∂–µ –±—É—Ç–∏ —à–∫—ñ–¥–ª–∏–≤–∏–º: '
                                                   f'–≤–æ–¥–∞ —Å—Ç–≤–æ—Ä—é—î –Ω–µ—Å–ø—Ä–∞–≤–∂–Ω—î –≤—ñ–¥—á—É—Ç—Ç—è —Å–∏—Ç–æ—Å—Ç—ñ, '
                                                   f'–∞ —Ç–∞–∫–æ–∂ –Ω–∞–≤–∞–Ω—Ç–∞–∂—É—î –Ω–µ–∑—Ä—ñ–ª—ñ –Ω–∏—Ä–∫–∏ –º–∞–ª—é–∫–∞. '
                                                   f'–í—ñ–¥ –Ω–∞–¥–º—ñ—Ä–Ω–æ—ó –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —Ä—ñ–¥–∏–Ω–∏ –º–æ–∂–µ –Ω–∞—Å—Ç—É–ø–∏—Ç–∏ –Ω–∞–≤—ñ—Ç—å —Ç–∞–∫ –∑–≤–∞–Ω–∞ '
                                                   f'¬´–≤–æ–¥–Ω–∞ —ñ–Ω—Ç–æ–∫—Å–∏–∫–∞—Ü—ñ—è¬ª.',
                           reply_markup=button.next())


# 6 –í–û–ü–†–û–°
# ******************************************************************************************************************
# 7 –í–û–ü–†–û–°


@dp.callback_query_handler(text='nxt', state=quest.q6)
async def question_7(call: types.CallbackQuery):
    await call.answer()
    await bot.send_message(call.from_user.id, text="7 –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –∑ 13\n\n"
                                                   "–ü—ñ—Å–ª—è –∫–æ–∂–Ω–æ–≥–æ –≥–æ–¥—É–≤–∞–Ω–Ω—è –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ –∑—Ü—ñ–¥–∂—É–≤–∞—Ç–∏—Å—å",
                           reply_markup=button.yes_no())
    await quest.next()


@dp.callback_query_handler(text='yes_yes', state=quest.q7)
async def question_7(call: types.CallbackQuery):
    await call.answer()
    await bot.send_message(call.from_user.id, text=f'–ù—ñ, –Ω–µ —Ç—Ä–µ–±–∞.\n–ó—Ü—ñ–¥–∂—É–≤–∞—Ç–∏ –º–æ–ª–æ–∫–æ –≤–∞—Ä—Ç–æ –≤ —Ç–æ–º—É –≤–∏–ø–∞–¥–∫—É, '
                                                   f'—è–∫—â–æ –≤–∏ –≤—ñ–¥—á—É–≤–∞—î—Ç–µ –Ω–∞–≥—Ä—ñ–≤–∞–Ω–Ω—è —Ç–∞ –¥–∏—Å–∫–æ–º—Ñ–æ—Ä—Ç, '
                                                   f'–≤ —É—Å—ñ—Ö —ñ–Ω—à–∏—Ö –≤–∏–ø–∞–¥–∫–∞—Ö —Ü—å–æ–≥–æ —Ä–æ–±–∏—Ç–∏ –Ω–µ —Å–ª—ñ–¥ '
                                                   f'(–Ω–∞–¥–º—ñ—Ä–Ω—ñ –∑—É—Å–∏–ª–ª—è –∑ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –º–æ–ª–æ–∫–∞, —â–æ –∑–∞–ª–∏—à–∏–ª–æ—Å—å —É –≥—Ä—É–¥—è—Ö, '
                                                   f'–º–æ–∂–µ –ø—Ä–∏–∑–≤–µ—Å—Ç–∏ –¥–æ –ª–∞–∫—Ç–æ—Å—Ç–∞–∑—ñ–≤).',
                           reply_markup=button.next())


@dp.callback_query_handler(text='nope', state=quest.q7)
async def question_7(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        data['points'] = data.get('points', 0) + 1
    await call.answer()
    await bot.send_message(call.from_user.id, text=f'–ü—Ä–∞–≤–∏–ª—å–Ω–æ.\n–ó—Ü—ñ–¥–∂—É–≤–∞—Ç–∏—Å—å –ø—ñ—Å–ª—è –∫–æ–∂–Ω–æ–≥–æ –≥–æ–¥—É–≤–∞–Ω–Ω—è '
                                                   f'–Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ ‚Äì —Ü–µ –∑–∞–π–≤–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä–∞, '
                                                   f'—â–æ –º–æ–∂–µ –ø—Ä–∏–∑–≤–µ—Å—Ç–∏ –¥–æ –ø–æ—Ä—É—à–µ–Ω–Ω—è –ø—Ä–∏—Ä–æ–¥–Ω—å–æ–≥–æ —Ö–æ–¥—É –ª–∞–∫—Ç–∞—Ü—ñ—ó.',
                           reply_markup=button.next())


# 7 –í–û–ü–†–û–°
# ******************************************************************************************************************
# 8 –í–û–ü–†–û–°


@dp.callback_query_handler(text='nxt', state=quest.q7)
async def question_8(call: types.CallbackQuery):
    await call.answer()
    await bot.send_message(call.from_user.id, text="8 –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –∑ 13\n\n"
                                                   "–ì—Ä—É–¥–Ω–µ –≤–∏–≥–æ–¥–æ–≤—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å–Ω–µ –Ω–µ –ª–∏—à–µ –¥–ª—è –¥–∏—Ç–∏–Ω–∏, "
                                                   "–∞–ª–µ –π –¥–ª—è –º–∞—Ç–µ—Ä—ñ",
                           reply_markup=button.yes_no())
    await quest.next()


@dp.callback_query_handler(text='yes_yes', state=quest.q8)
async def question_8(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        data['points'] = data.get('points', 0) + 1
    await call.answer()
    await bot.send_message(call.from_user.id, text=f'–ü—Ä–∞–≤–∏–ª—å–Ω–æ!\n–ì—Ä—É–¥–Ω–µ –≤–∏–≥–æ–¥–æ–≤—É–≤–∞–Ω–Ω—è –≤–≤–∞–∂–∞—î—Ç—å—Å—è –≥–∞—Ä–Ω–æ—é –ø—Ä–æ—Ñ—ñ–ª–∞–∫—Ç–∏–∫–æ—é '
                                                   f'—Ä–∞–∫—É –≥—Ä—É–¥–µ–π —Ç–∞ —è—î—á–Ω–∏–∫—ñ–≤, –∑–Ω–∏–∂—É—î —Ä–∏–∑–∏–∫ —Å–µ—Ä—Ü–µ–≤–æ-—Å—É–¥–∏–Ω–Ω–∏—Ö '
                                                   f'–∑–∞—Ö–≤–æ—Ä—é–≤–∞–Ω—å, —Ü—É–∫—Ä–æ–≤–æ–≥–æ –¥—ñ–∞–±–µ—Ç—É 2-–≥–æ —Ç–∏–ø—É, '
                                                   f'–∞—Ä—Ç—Ä–∏—Ç—É —Ç–∞ –Ω–∞–≤—ñ—Ç—å –ø–µ—Ä–µ–ª–æ–º—É —à–∏–π–∫–∏ —Å—Ç–µ–≥–Ω–∞ —É –∑—Ä—ñ–ª–æ–º—É –≤—ñ—Ü—ñ!',
                           reply_markup=button.next())


@dp.callback_query_handler(text='nope', state=quest.q8)
async def question_8(call: types.CallbackQuery):
    await call.answer()
    await bot.send_message(call.from_user.id, text=f'–ù–µ –≤—Å–µ –ª–∏—à–µ –¥–∏—Ç–∏–Ω—ñ!\n'
                                                   f'–ì–í –∫–æ—Ä–∏—Å–Ω–µ –¥–ª—è –º–∞—Ç–µ—Ä–∏–Ω—Å—å–∫–æ–≥–æ –∑–¥–æ—Ä–æ–≤‚Äô—è ‚Äì –ø—Ä–æ —Ü–µ —Å–≤—ñ–¥—á–∞—Ç—å '
                                                   f'—Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –±–∞–≥–∞—Ç—å–æ—Ö –¥–æ—Å–ª—ñ–¥–∂–µ–Ω—å –ø–æ –≤—Å—å–æ–º—É —Å–≤—ñ—Ç—É.\n'
                                                   f'–õ–∞–∫—Ç–∞—Ü—ñ—è –∑–∞—Ö–∏—â–∞—î –∂—ñ–Ω–æ–∫ –≤—ñ–¥ –±–∞–≥–∞—Ç—å–æ—Ö –∑–∞—Ö–≤–æ—Ä—é–≤–∞–Ω—å, '
                                                   f'—É —Ç–æ–º—É —á–∏—Å–ª—ñ –≤—ñ–¥ —Ä–∞–∫—É –æ—Ä–≥–∞–Ω—ñ–≤ —Ä–µ–ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—ó —Å–∏—Å—Ç–µ–º–∏.',
                           reply_markup=button.next())


# 8 –í–û–ü–†–û–°
# ******************************************************************************************************************
# 9 –í–û–ü–†–û–°


@dp.callback_query_handler(text='nxt', state=quest.q8)
async def question_9(call: types.CallbackQuery):
    await call.answer()
    await bot.send_message(call.from_user.id, text="9 –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –∑ 13\n\n"
                                                   "–ù–∞ –ì–í –º–æ–∂–Ω–∞ —Å—Ö—É–¥–Ω—É—Ç–∏?",
                           reply_markup=button.yes_no())
    await quest.next()


@dp.callback_query_handler(text='yes_yes', state=quest.q9)
async def question_9(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        data['points'] = data.get('points', 0) + 1
    await call.answer()
    await bot.send_message(call.from_user.id, text=f'–¶–µ –ø—Ä–∞–≤–¥–∞!\n–ù–∞ —Ç–µ, –∞–±–∏ –≤–∏—Ä–æ–±–∏—Ç–∏ –º–æ–ª–æ–∫–æ, '
                                                   f'–æ—Ä–≥–∞–Ω—ñ–∑–º –≤–∏—Ç—Ä–∞—á–∞—î –ø—Ä–∏–±–ª–∏–∑–Ω–æ —Å—Ç—ñ–ª—å–∫–∏ –∂ –∫–∞–ª–æ—Ä—ñ–π, '
                                                   f'—Å–∫—ñ–ª—å–∫–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ –Ω–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫—É —Ä–æ–±–æ—Ç–∏ –º–æ–∑–∫—É –ø—Ä–æ—Ç—è–≥–æ–º –¥–Ω—è.\n'
                                                   f'–Ü—Å–Ω—É—î –≤–µ—Ä—Å—ñ—è, —â–æ –¥–µ–Ω—å –ª–∞–∫—Ç–∞—Ü—ñ—ó –∑–∞ –µ–Ω–µ—Ä–≥–æ–≤–∏—Ç—Ä–∞—Ç–∞–º–∏ –¥–æ—Ä—ñ–≤–Ω—é—î '
                                                   f'–¥–µ–≤‚Äô—è—Ç–∏–∫—ñ–ª–æ–º–µ—Ç—Ä–æ–≤—ñ–π –ø—Ä–æ–≥—É–ª—è–Ω—Ü—ñ. –•–æ—á–∞, –¥–∞–ª–µ–∫–æ –Ω–µ —É—Å—ñ –∂—ñ–Ω–∫–∏ —Ö—É–¥–Ω—É—Ç—å '
                                                   f'–Ω–∞ –ì–í ‚Äì —Ü–µ –Ω–µ —É–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∏–π —Ä–µ—Ü–µ–ø—Ç. –°–∞–º–µ —Ç–æ–º—É –≤ —Ñ–æ—Ä–º—É–ª—é–≤–∞–Ω–Ω—ñ '
                                                   f'–æ–±—Ä–∞–Ω–æ —Å–ª–æ–≤–æ ¬´–º–æ–∂–Ω–∞¬ª ‚Äì —Ç–æ–º—É —â–æ –º–æ–∂–Ω–∞ —Å—Ö—É–¥–Ω—É—Ç–∏, –∞ –º–æ–∂–Ω–∞ —ñ –Ω—ñ.',
                           reply_markup=button.next())


@dp.callback_query_handler(text='nope', state=quest.q9)
async def question_9(call: types.CallbackQuery):
    await call.answer()
    await bot.send_message(call.from_user.id, text=f'–ù–∞—Å–ø—Ä–∞–≤–¥—ñ –º–æ–∂–Ω–∞.\n–ó–æ–≤—Å—ñ–º –Ω–µ–æ–±–æ–≤‚Äô—è–∑–∫–æ–≤–æ, '
                                                   f'—â–æ –ì–í –∑–º—É—Å–∏—Ç—å –≤–∞—Å –Ω–∞–±—Ä–∞—Ç–∏ –≤–∞–≥—É.\n'
                                                   f'–¢–≤–µ—Ä–¥–∂–µ–Ω–Ω—è, —â–æ ¬´–≥–æ–¥—É–≤–∞–Ω–Ω—è –≥—Ä—É–¥–¥—é ‚Äì –æ–±–æ–≤‚Äô—è–∑–∫–æ–≤–∏–π –Ω–∞–±—ñ—Ä –≤–∞–≥–∏¬ª '
                                                   f'–Ω–µ–≤—ñ—Ä–Ω–µ. –í–∏—Ç—Ä–∞—Ç–∞ –µ–Ω–µ—Ä–≥—ñ—ó –ø—ñ–¥ —á–∞—Å –≥–æ–¥—É–≤–∞–Ω–Ω—è –¥—É–∂–µ –≤–∏—Å–æ–∫–∞.',
                           reply_markup=button.next())


# 9 –í–û–ü–†–û–°
# ******************************************************************************************************************
# 10 –í–û–ü–†–û–°


@dp.callback_query_handler(text='nxt', state=quest.q9)
async def question_10(call: types.CallbackQuery):
    await call.answer()
    await bot.send_message(call.from_user.id, text="10 –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –∑ 13\n\n"
                                                   "–ê–±—Å–æ–ª—é—Ç–Ω–æ –≤—Å—ñ –¥–æ–±–∞–≤–∫–∏ —Ç–∞ —á–∞—ó –¥–ª—è –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è "
                                                   "–ª–∞–∫—Ç–∞—Ü—ñ—ó –∫–æ—Ä–∏—Å–Ω—ñ —Ç–∞ –±–µ–∑–ø–µ—á–Ω—ñ.",
                           reply_markup=button.yes_no())
    await quest.next()


@dp.callback_query_handler(text='yes_yes', state=quest.q10)
async def question_10(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        data['points'] = data.get('points', 0) + 1
    await call.answer()
    await bot.send_message(call.from_user.id, text=f'–¶–µ –Ω–µ —Ç–∞–∫.\n–ó–∞—Å—Ç–∞—Ä—ñ–ª—ñ –∑–∞—Å–æ–±–∏ –¥–ª—è –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è –ª–∞–∫—Ç–∞—Ü—ñ—ó –º–æ–∂—É—Ç—å '
                                                   f'–º—ñ—Å—Ç–∏—Ç–∏ –≤ —Å–æ–±—ñ –∫–º–∏–Ω (—Ñ–µ–Ω—Ö–µ–ª—å), —è–∫–∏–π –ø—Ä–æ–Ω–∏–∫–∞—î —É –≥—Ä—É–¥–Ω–µ –º–æ–ª–æ–∫–æ '
                                                   f'—Ç–∞ –≤–∏–∫–ª–∏–∫–∞—î –Ω–µ—Ä–≤–æ–≤–µ –ø–µ—Ä–µ–∑–±—É–¥–∂–µ–Ω–Ω—è —É –¥–∏—Ç–∏–Ω–∏ (–∞ –∑–Ω–∞—á–∏—Ç—å —ñ —É –º–∞–º–∏, '
                                                   f'—ñ —É —Ç–∞—Ç–∞, —ñ —É —Å—É—Å—ñ–¥—ñ–≤‚Ä¶). –¢–∞–∫–æ–∂ —î –ø—Ä–æ–¥—É–∫—Ç–∏ –¥–ª—è –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è '
                                                   f'–ª–∞–∫—Ç–∞—Ü—ñ—ó –∑ –≤–º—ñ—Å—Ç–æ–º –ø—Ä–æ–¥—É–∫—Ç—ñ–≤ –±–¥–∂–æ–ª—è—Ä—Å—Ç–≤–∞, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥, '
                                                   f'–∑ –º–∞—Ç–æ—á–Ω–∏–º –º–æ–ª–æ—á–∫–æ–º. –¶–µ —à—Ç—É–∫–∞ –∫–æ—Ä–∏—Å–Ω–∞, –∞–ª–µ –¥—É–∂–µ –∞–ª–µ—Ä–≥–µ–Ω–Ω–∞. '
                                                   f'–ú–∞–ª–µ–Ω—å–∫–æ–º—É –æ—Ä–≥–∞–Ω—ñ–∑–º—É –∞–ª–µ—Ä–≥–µ–Ω—ñ–≤ —ñ —Ç–∞–∫ –≤–∏—Å—Ç–∞—á–∏—Ç—å. –•–∞–π –∫—Ä–∞—â–µ –∑–≤–∏–∫–∞—î, '
                                                   f'—â–æ –º–∞–º–∞ —ó—Å—Ç—å —à–æ–∫–æ–ª–∞–¥.',
                           reply_markup=button.next())


@dp.callback_query_handler(text='nope', state=quest.q10)
async def question_10(call: types.CallbackQuery):
    await call.answer()
    await bot.send_message(call.from_user.id, text=f'–ü—Ä–∞–≤–∏–ª—å–Ω–æ!\n–ü—Ä–æ–¥—É–∫—Ç–∏ –∑ –∫–º–∏–Ω–æ–º (—Ñ–µ–Ω—Ö–µ–ª—å) –∑–∞–±–æ—Ä–æ–Ω–µ–Ω—ñ –¥–ª—è –Ω–µ–º–æ–≤–ª—è '
                                                   f'—Ç–∞ –¥–ª—è –≥–æ–¥—É—é—á–æ—ó –º–∞–º–∏, —Ç–æ–º—É —â–æ –≤–∏–∫–ª–∏–∫–∞—é—Ç—å –Ω–µ—Ä–≤–æ–≤–µ –∑–±—É–¥–∂–µ–Ω–Ω—è '
                                                   f'—É –¥–∏—Ç–∏–Ω–∏.\n–¢–∞–∫–æ–∂ –ø—Ä–æ–¥—É–∫—Ç–∏ –∑ –±–¥–∂–æ–ª–∏–Ω–∏–º –º–∞—Ç–æ—á–Ω–∏–º –º–æ–ª–æ—á–∫–æ–º –∑–∞–Ω–∞–¥—Ç–æ '
                                                   f'–∞–ª–µ—Ä–≥–µ–Ω–Ω—ñ, –Ω–µ –≤–∞—Ä—Ç–æ —Ä–∏–∑–∏–∫—É–≤–∞—Ç–∏, —î –∂ —ñ —ñ–Ω—à—ñ –ø—Ä–æ–¥—É–∫—Ç–∏ –¥–ª—è '
                                                   f'–ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è –ª–∞–∫—Ç–∞—Ü—ñ—ó.',
                           reply_markup=button.next())


# 10 –í–û–ü–†–û–°
# ******************************************************************************************************************
# 11 –í–û–ü–†–û–°


@dp.callback_query_handler(text='nxt', state=quest.q10)
async def question_11(call: types.CallbackQuery):
    await call.answer()
    await bot.send_message(call.from_user.id, text="11 –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –∑ 13\n\n"
                                                   "–ú–∞–º–∞, —â–æ –≥–æ–¥—É—î, –æ–±–æ–≤‚Äô—è–∑–∫–æ–≤–æ –ø–æ–≤–∏–Ω–Ω–∞ –¥–æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏—Å—è —Å—É–≤–æ—Ä–æ—ó –¥—ñ—î—Ç–∏?",
                           reply_markup=button.yes_no())
    await quest.next()


@dp.callback_query_handler(text='yes_yes', state=quest.q11)
async def question_11(call: types.CallbackQuery):
    await call.answer()
    await bot.send_message(call.from_user.id, text=f'–¶–µ –Ω–µ —Ç–∞–∫.\n–°—É–≤–æ—Ä–∞ –¥—ñ—î—Ç–∞ —É —Å–ø—Ä–æ–±—ñ —É–Ω–∏–∫–Ω—É—Ç–∏ —Ä–∏–∑–∏–∫—É —Ä–æ–∑–≤–∏—Ç–∫—É '
                                                   f'–∞–ª–µ—Ä–≥—ñ—ó —É –º–∞–ª—é–∫–∞ –º–æ–∂–µ –ø—Ä–∏–∑–≤–µ—Å—Ç–∏‚Ä¶ –¥–æ —Ä–∏–∑–∏–∫—É —Ä–æ–∑–≤–∏—Ç–∫—É –∞–ª–µ—Ä–≥—ñ—ó '
                                                   f'—É –º–∞–ª—é–∫–∞!\n–ß–∏–º —Ä—ñ–∑–Ω–æ–º–∞–Ω—ñ—Ç–Ω—ñ—à–∏–º —î —Ö–∞—Ä—á—É–≤–∞–Ω–Ω—è –º–∞–º–∏, —â–æ –≥–æ–¥—É—î, '
                                                   f'—Ç–∏–º –∫—Ä–∞—â–µ –≤–æ–Ω–∞ —Å–µ–±–µ –ø–æ—á—É–≤–∞—î, —Ç–∏–º –±—ñ–ª—å—à–µ —É –Ω–µ—ó —Å–∏–ª, —Ç–∏–º –±—ñ–ª—å—à–µ '
                                                   f'—Å–º–∞–∫—ñ–≤ –¥—ñ–∑–Ω–∞—î—Ç—å—Å—è —ó—ó –¥–∏—Ç–∏–Ω–∞ (—Ç–∞–∫, –º–æ–ª–æ–∫–æ –º–æ–∂–µ —Ç—Ä–∞–Ω—Å–ª—é–≤–∞—Ç–∏ —Å–º–∞–∫–∏ '
                                                   f'—ó–∂—ñ, —â–æ —ó—ó –∑‚Äô—ó–ª–∞ –º–∞—Ç–∏, —ó—ó –¥–∏—Ç–∏–Ω—ñ).',
                           reply_markup=button.next())


@dp.callback_query_handler(text='nope', state=quest.q11)
async def question_11(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        data['points'] = data.get('points', 0) + 1
    await call.answer()
    await bot.send_message(call.from_user.id, text=f'–ü—Ä–∞–≤–∏–ª—å–Ω–æ!\n–ñ–æ–¥–Ω–∏—Ö –¥—ñ—î—Ç –±–µ–∑ –ø—Ä–∏—á–∏–Ω–∏ –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ, '
                                                   f'—â–æ –± —Ç–∞–º –Ω–µ –∫–∞–∑–∞–ª–∏ —Å—É–≤–æ—Ä—ñ —Ç—ñ—Ç–æ–Ω—å–∫–∏ —É –ø–æ–ª–æ–≥–æ–≤–∏—Ö –±—É–¥–∏–Ω–∫–∞ –Ω–∞ '
                                                   f'–ø–æ—Å—Ç—Ä–∞–¥—è–Ω—Å—å–∫–æ–º—É –ø—Ä–æ—Å—Ç–æ—Ä—ñ. –¢–æ–º—É —â–æ –ø–æ–Ω—è—Ç—Ç—è ¬´–¥—ñ—î—Ç–∞ –º–∞—Ç–µ—Ä—ñ, '
                                                   f'—â–æ –≥–æ–¥—É—î¬ª ‚Äì –æ–∫—Å—é–º–æ—Ä–æ–Ω, —è–∫–∏–π —ñ—Å–Ω—É—î —Ç—ñ–ª—å–∫–∏ –Ω–∞ —Ç–æ–º—É —Å–∞–º–æ–º—É –ø—Ä–æ—Å—Ç–æ—Ä—ñ.',
                           reply_markup=button.next())


# 11 –í–û–ü–†–û–°
# ******************************************************************************************************************
# 12 –í–û–ü–†–û–°


@dp.callback_query_handler(text='nxt', state=quest.q11)
async def question_12(call: types.CallbackQuery):
    await call.answer()
    await bot.send_message(call.from_user.id, text="12 –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –∑ 13\n\n"
                                                   "–í—ñ–¥–ª—É—á–µ–Ω–Ω—è –≤—ñ–¥ –≥—Ä—É–¥–µ–π –º–æ–∂–µ —Å–ø—Ä–æ–≤–æ–∫—É–≤–∞—Ç–∏ –¥–µ–ø—Ä–µ—Å–∏–≤–Ω–∏–π —Å—Ç–∞–Ω —É "
                                                   "–∂—ñ–Ω–∫–∏?",
                           reply_markup=button.yes_no())
    await quest.next()


@dp.callback_query_handler(text='yes_yes', state=quest.q12)
async def question_12(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        data['points'] = data.get('points', 0) + 1
    await call.answer()
    await bot.send_message(call.from_user.id, text=f'–¶–µ –ø—Ä–∞–≤–¥–∞.\n–Ü—Å–Ω—É—î —Ç–∞–∫–µ –ø–æ–Ω—è—Ç—Ç—è ‚Äì –¥–µ–ø—Ä–µ—Å—ñ—è –≤—ñ–¥–ª—É—á–µ–Ω–Ω—è. '
                                                   f'–¶–µ —Å—Ç–∞–Ω –ø—Ä–∏–≥–Ω—ñ—á–µ–Ω–Ω—è —Ç–∞ —Ç—É–≥–∏, —è–∫–∏–π –º–æ–∂–µ –≤—ñ–¥—á—É–≤–∞—Ç–∏ –Ω–∞–≤—ñ—Ç—å —Ç–∞ –º–∞—Ç–∏, '
                                                   f'—è–∫–∞ —á–µ–∫–∞–ª–∞ –Ω–∞ –¥–µ–Ω—å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –ª–∞–∫—Ç–∞—Ü—ñ—ó —è–∫ –º–∞–Ω–Ω–∏ –Ω–µ–±–µ—Å–Ω–æ—ó. '
                                                   f'–¶–µ –ø–æ—è—Å–Ω—é—î—Ç—å—Å—è —Ç–∏–º, —â–æ –≤ –∂—ñ–Ω–æ—á–æ–º—É –æ—Ä–≥–∞–Ω—ñ–∑–º—ñ –≤—ñ–¥–±—É–≤–∞—é—Ç—å—Å—è –≤–µ–ª–∏–∫—ñ '
                                                   f'–≥–æ—Ä–º–æ–Ω–∞–ª—å–Ω—ñ –∑–º—ñ–Ω–∏ (—Ç–∞–∫, –∑–Ω–æ–≤—É). –°—É–º—É–≤–∞—Ç–∏ –ø—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è '
                                                   f'–ì–í ‚Äì –Ω–æ—Ä–º–∞–ª—å–Ω–æ.',
                           reply_markup=button.next())


@dp.callback_query_handler(text='nope', state=quest.q12)
async def question_12(call: types.CallbackQuery):
    await call.answer()
    await bot.send_message(call.from_user.id, text=f'–ù–∞ —Å–ø—Ä–∞–≤–¥—ñ –Ω—ñ.\n–¢–æ–±—Ç–æ —Ç–∞–∫. –£ –∂—ñ–Ω–∫–∏ –º–æ–∂–µ —Ä–æ–∑–≤–∏–≤–∞—Ç–∏—Å—å —Å—Ç–∞–Ω '
                                                   f'–ø—Ä–∏–≥–Ω—ñ—á–µ–Ω–æ—Å—Ç—ñ, —è–∫–∏–π –º–∞—î –Ω–∞–∑–≤—É –¥–µ–ø—Ä–µ—Å—ñ—è –≤—ñ–¥–ª—É—á–µ–Ω–Ω—è. –í—Å–µ –≥–æ—Ä–º–æ–Ω–∏!',
                           reply_markup=button.next())


# 12 –í–û–ü–†–û–°
# ******************************************************************************************************************
# 13 –í–û–ü–†–û–°


@dp.callback_query_handler(text='nxt', state=quest.q12)
async def question_13(call: types.CallbackQuery):
    await call.answer()
    await bot.send_message(call.from_user.id, text="13 –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –∑ 13\n\n"
                                                   "–î–æ–±–∞–≤–∫–∏ –¥–ª—è –ø—ñ–¥—Ç—Ä–∏–º–∞–Ω–Ω—è –ª–∞–∫—Ç–∞—Ü—ñ—ó –ø–æ—Ç—Ä—ñ–±–Ω—ñ –ª–∏—à–µ —Ç–∏–º, "
                                                   "—É –∫–æ–≥–æ –ø—Ä–æ–ø–∞–ª–æ –º–æ–ª–æ–∫–æ. ",
                           reply_markup=button.yes_no())
    await quest.next()


@dp.callback_query_handler(text='yes_yes', state=quest.q13)
async def question_13(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        data['points'] = data.get('points', 0) + 1
    await call.answer()
    await bot.send_message(call.from_user.id, text=f'–¶–µ –Ω–µ —Ç–∞–∫.\n–°—É—á–∞—Å–Ω—ñ –¥—ñ—î—Ç–∏—á–Ω—ñ –¥–æ–±–∞–≤–∫–∏ —Ä–æ–∑—Ä–æ–±–ª–µ–Ω—ñ –¥–ª—è –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ '
                                                   f'–≥—Ä—É–¥–Ω–æ–≥–æ –≤–∏–≥–æ–¥–æ–≤—É–≤–∞–Ω–Ω—è. –Ü—Å–Ω—É—é—Ç—å —Å–ø–µ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω—ñ –¥—ñ—î—Ç–∏—á–Ω—ñ –¥–æ–±–∞–≤–∫–∏, '
                                                   f'—â–æ –∑–∞–ø–æ–±—ñ–≥–∞—é—Ç—å –≤—Ç—Ä–∞—Ç—ñ –º–æ–ª–æ–∫–∞ —Ç–∞ –Ω–∞—Å–∏—á—É—é—Ç—å –π–æ–≥–æ –∫–æ—Ä–∏—Å–Ω–∏–º–∏ '
                                                   f'—Ä–µ—á–æ–≤–∏–Ω–∞–º–∏, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥ —Ü–∏–Ω–∫–æ–º.',
                           reply_markup=button.end())


@dp.callback_query_handler(text='nope', state=quest.q13)
async def question_13(call: types.CallbackQuery):
    await call.answer()
    await bot.send_message(call.from_user.id, text=f'–ü—Ä–∞–≤–∏–ª—å–Ω–æ!\n–í–∏ –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—Ç–∏ –Ω–∞–π—Å—É—á–∞—Å–Ω—ñ—à—É –¥–æ–±–∞–≤–∫—É –¥–æ —Ä–∞—Ü—ñ–æ–Ω—É –º–∞–º–∏, '
                                                   f'—â–æ –≥–æ–¥—É—î. –¶—è –¥–æ–±–∞–≤–∫–∞ –¥–æ–ø–æ–º–æ–∂–µ –Ω–µ —Ç—ñ–ª—å–∫–∏ –ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –ª–∞–∫—Ç–∞—Ü—ñ—é —Ç–∞ '
                                                   f'–Ω–∞—Å–∏—á—É–≤–∞—Ç–∏ –º–æ–ª–æ–∫–æ –∫–æ—Ä–∏—Å–Ω–∏–º–∏ —Ä–µ—á–æ–≤–∏–Ω–∞–º–∏, –∞ –π –ø–æ–∫—Ä–∞—â–∏—Ç–∏ '
                                                   f'–≤–∏—Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å –º–∞–º–∏ —Ç–∞ –ø—Ä–∏—Å–∫–æ—Ä–∏—Ç–∏ –∑–º–µ–Ω—à–µ–Ω–Ω—è –≤–∞–≥–∏ –ø—ñ—Å–ª—è –ø–æ–ª–æ–≥—ñ–≤.',
                           reply_markup=button.end())


# 13 –í–û–ü–†–û–°
# ******************************************************************************************************************
# –ö–û–ù–ï–¶. –ò–¢–û–ì–ò


@dp.callback_query_handler(text='endd', state=quest.q13)
async def back_end(call: types.CallbackQuery, state: FSMContext):
    await call.answer()
    async with state.proxy() as data:
        counter = data.get('points')
    db.update_point(call.from_user.id, counter)
    if counter == 0 or counter <= 4:
        await bot.send_photo(call.from_user.id,
                             photo=open(os.path.join(config.path_photo, 'image_2022-08-16_14-26-03.png'), 'rb'),
                             caption=f"{config.minimum}\n"
                                     f"–í–∞—à–∏ –±–∞–ª–ª—ã: {counter}\n",
                             reply_markup=button.axxe(counter, config.minimum))
    elif counter >= 5 and counter <= 9:
        await bot.send_photo(call.from_user.id,
                             photo=open(os.path.join(config.path_photo, 'image_2022-08-16_14-26-31.png'), 'rb'),
                             caption=f"{config.medium}\n"
                                     f"–í–∞—à–∏ –±–∞–ª–ª—ã: {counter}\n",
                             reply_markup=button.axxe(counter, config.medium))
    else:
        await bot.send_photo(call.from_user.id,
                             photo=open(os.path.join(config.path_photo, 'image_2022-08-16_14-26-39.png'), 'rb'),
                             caption=f"{config.maximum}\n"
                                     f"–í–∞—à–∏ –±–∞–ª–ª—ã: {counter}\n",
                             reply_markup=button.axxe(counter, config.maximum))
    await state.finish()


if __name__ == '__main__':
    executor.start_polling(dp, on_startup=on_startup)
